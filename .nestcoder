# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/dejavideo/src/youtube-channels/youtube-channels.service.ts">
import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { YoutubeChannel } from './youtube-channel.entity';
import { google, youtube_v3 } from 'googleapis';

@Injectable()
export class YoutubeChannelsService {
  private youtube: youtube_v3.Youtube;

  constructor(
    @InjectRepository(YoutubeChannel)
    private youtubeChannelRepository: Repository<YoutubeChannel>,
  ) {
    const auth = new google.auth.GoogleAuth({
      keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
      scopes: ['https://www.googleapis.com/auth/youtube.readonly'],
    });

    this.youtube = google.youtube({ version: 'v3', auth });
  }

  async saveChannel(channelData: Partial<YoutubeChannel>): Promise<YoutubeChannel> {
    if (!channelData.title) {
      if (channelData.channelId) {
        try {
          const fetchedData = await this.fetchYoutubeChannelData(channelData.channelId);
          channelData.title = fetchedData.title;
        } catch (error) {
          if (error instanceof NotFoundException) {
            throw new BadRequestException('Channel not found');
          }
          throw error;
        }
      } else {
        throw new BadRequestException('Channel title or channelId is required');
      }
    }

    if (!channelData.title) {
      throw new BadRequestException('Failed to fetch channel title');
    }

    const channel = this.youtubeChannelRepository.create(channelData);
    return await this.youtubeChannelRepository.save(channel);
  }

  async getChannelsByUserId(userId: string): Promise<YoutubeChannel[]> {
    return await this.youtubeChannelRepository.find({ where: { userId } });
  }

  async fetchYoutubeChannelData(channelId: string): Promise<Partial<YoutubeChannel>> {
    try {
      const response = await this.youtube.channels.list({
        part: ['snippet'],
        id: [channelId],
      });

      if (response.data.items && response.data.items.length > 0) {
        const channel = response.data.items[0];
        return {
          channelId: channel.id,
          title: channel.snippet.title,
          description: channel.snippet.description,
        };
      } else {
        throw new NotFoundException('Channel not found');
      }
    } catch (error) {
      console.error('Error fetching YouTube channel data:', error);
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new Error('Failed to fetch YouTube channel data');
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/dejavideo/src/youtube-channels/youtube-channel.entity.ts">
import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';

@Entity()
export class YoutubeChannel {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  channelId: string;

  @Column()
  title: string;

  @Column({ nullable: true })
  description: string;

  @Column()
  userId: string;
}
</FILE>
<FILE path="/home/travis/Projects/dejavideo/src/youtube-channels/youtube-channels.module.ts">
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { YoutubeChannel } from './youtube-channel.entity';
import { YoutubeChannelsService } from './youtube-channels.service';
import { YoutubeChannelsController } from './youtube-channels.controller';

@Module({
  imports: [TypeOrmModule.forFeature([YoutubeChannel])],
  providers: [YoutubeChannelsService],
  controllers: [YoutubeChannelsController],
  exports: [YoutubeChannelsService],
})
export class YoutubeChannelsModule {}
</FILE>
<FILE path="/home/travis/Projects/dejavideo/src/views/partials/channel-options.ejs">
<option value="">Select a Channel</option>
<% channels.forEach(function(channel) { %>
  <option value="<%= channel.channelId %>"><%= channel.title %></option>
<% }); %>
</FILE>
<FILE path="/home/travis/Projects/dejavideo/src/views/partials/channel-list.ejs">
<h2>Added Channels</h2>
<ul>
  <% channels.forEach(function(channel) { %>
    <li><%= channel.title %> (ID: <%= channel.channelId %>)</li>
  <% }); %>
</ul>
</FILE>
<FILE path="/home/travis/Projects/dejavideo/src/app.module.ts">
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { YoutubePlaylistModule } from './youtube-playlist/youtube-playlist.module';
import { YoutubeChannelsModule } from './youtube-channels/youtube-channels.module';
import { YoutubeVideosModule } from './youtube-videos/youtube-videos.module';
import { VideoTimelineModule } from './video-timeline/video-timeline.module';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'sqlite',
      database: 'data/dejavideo.sqlite',
      entities: [__dirname + '/**/*.entity{.ts,.js}'],
      synchronize: true,
    }),
    YoutubePlaylistModule,
    YoutubeChannelsModule,
    YoutubeVideosModule,
    VideoTimelineModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
</FILE>
<FILE path="/home/travis/Projects/dejavideo/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { CustomLogger } from './logger/custom-logger';
import { resolve } from 'path';
import * as dotenv from 'dotenv';

// Load environment variables from .env file
dotenv.config();

async function bootstrap(logger: CustomLogger) {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });

  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });
  
  await app.listen(3000);
}

const logger = new CustomLogger('Bootstrap');

bootstrap(logger);
</FILE>
<FILE path="src/youtube-channels/youtube-channels.controller.ts" TARGET>
import { Controller, Post, Body, Get, Param, Render } from '@nestjs/common';
import { YoutubeChannelsService } from './youtube-channels.service';
import { YoutubeChannel } from './youtube-channel.entity';

@Controller('youtube-channels')
export class YoutubeChannelsController {
  constructor(private readonly youtubeChannelsService: YoutubeChannelsService) {}

  @Post()
  async createChannel(@Body() channelData: Partial<YoutubeChannel>): Promise<YoutubeChannel> {
    return this.youtubeChannelsService.saveChannel(channelData);
  }

  @Get(':userId')
  @Render('partials/channel-options')
  async getChannelsByUserId(@Param('userId') userId: string): Promise<{ channels: YoutubeChannel[] }> {
    const channels = await this.youtubeChannelsService.getChannelsByUserId(userId);
    return { channels };
  }
}
</FILE>
<REQUEST>
there should be partial view for channel list and channel options
</REQUEST>